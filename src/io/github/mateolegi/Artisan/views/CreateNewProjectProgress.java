/*
 * The MIT License
 *
 * Copyright 2017 mateo.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package io.github.mateolegi.Artisan.views;

import io.github.mateolegi.Artisan.util.Artisan;
import io.github.mateolegi.Artisan.util.Terminal;
import java.beans.PropertyChangeEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import javax.swing.JProgressBar;
import javax.swing.JTextArea;
import javax.swing.SwingWorker;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author mateo
 */
public class CreateNewProjectProgress extends javax.swing.JDialog {

    /**
     * Creates new form CreateNewProjectProgress
     *
     * @param owner the {@code Frame} from which the dialog is displayed
     * @param modal specifies whether dialog blocks user input to other
     * top-level windows when shown. If {@code true}, the modality type property
     * is set to {@code DEFAULT_MODALITY_TYPE}, otherwise the dialog is
     * modeless.
     * @param path the folder where the project will be created and saved.
     * @param projectName the name of the Laravel project.
     */
    public CreateNewProjectProgress(java.awt.Frame owner, boolean modal, File path, String projectName) {
        super(owner, modal);
        this.setIconImage(new javax.swing.ImageIcon(getClass()
                .getResource("/io/github/mateolegi/Artisan/images/Artisan.png"))
                .getImage().getScaledInstance(48, 48, java.awt.Image.SCALE_AREA_AVERAGING));
        initComponents();
        DefaultCaret caret = (DefaultCaret) textArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        javax.swing.JDialog dialog = this;
        CreateProjectProgress p = new CreateProjectProgress(progressBar, textArea, path, projectName);
        p.addPropertyChangeListener((PropertyChangeEvent evt) -> {
            if (evt.getPropertyName().equalsIgnoreCase("state")) {
                if (evt.getNewValue() == SwingWorker.StateValue.DONE) {
                    dialog.dispose();
                }
            }
        });
        p.execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        firstLabel = new javax.swing.JLabel();
        secondLabel = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Creating new Laravel project");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N
        setPreferredSize(new java.awt.Dimension(700, 400));

        firstLabel.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N
        firstLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        firstLabel.setText("We are creating your Laravel project, this may take a while.");

        secondLabel.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N
        secondLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        secondLabel.setText("Please, be pacient");

        textArea.setEditable(false);
        textArea.setBackground(new java.awt.Color(51, 51, 51));
        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        textArea.setForeground(new java.awt.Color(240, 240, 240));
        textArea.setRows(5);
        textArea.setBorder(null);
        textArea.setFocusable(false);
        scrollPane.setViewportView(textArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(firstLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(secondLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollPane))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(firstLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(secondLabel)
                .addGap(37, 37, 37)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel firstLabel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JLabel secondLabel;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}

class CreateProjectProgress extends SwingWorker<Integer, String> {

    private final JProgressBar progressBar;
    private final JTextArea textArea;
    private final File path;
    private final String projectName;
    private final Terminal terminal = new Terminal();

    public CreateProjectProgress(JProgressBar progressBar, JTextArea textArea, File path, String projectName) {
        this.progressBar = progressBar;
        this.textArea = textArea;
        this.path = path;
        this.projectName = projectName;
    }

    @Override
    protected Integer doInBackground() throws Exception {
        progressBar.setIndeterminate(true);
        ProcessBuilder pb = new ProcessBuilder("laravel", "new", projectName);
        ProcessBuilder pb2 = new ProcessBuilder("cmd", "/c", "laravel", "new", projectName);
        pb.directory(path);
        pb2.directory(path);
        Process p;
        try {
            System.out.println(path.getAbsoluteFile());
            System.out.println(projectName);
            System.out.println(Artisan.NEWAPP + projectName);
            try {
                p = pb.start();
            } catch (IOException ex) {
                System.out.println("Error: " + ex.getMessage());
                p = pb2.start();
            }
            InputStream output = p.getInputStream();
            BufferedReader in;
            in = new BufferedReader(new InputStreamReader(output));
            String reading = in.readLine();
            while (reading != null) {
                //System.out.println(reading);
                if (textArea != null) {
                    textArea.append(reading + "\n");
                }
                reading = in.readLine();
            }
        } catch (IOException e) {
            System.out.println("Error: " + e.getMessage());
            if (textArea != null) {
                textArea.setText("Error: " + e.getMessage());
            }
        }

        progressBar.setIndeterminate(false);
        return 0;
    }
}
